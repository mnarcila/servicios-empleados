/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.model.AutenticarRsType;
import io.swagger.model.Empleado;
import io.swagger.model.EmpleadoRsType;
import io.swagger.model.PostRsType;
import io.swagger.model.StatusType;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-09-15T18:38:52.094Z")
@CrossOrigin
@Api(value = "empleado", description = "the empleado API")
public interface EmpleadoApi {

    @ApiOperation(value = "Actualizar Inactivar/Activar Empleado por ID", nickname = "actualizarEmpleadoPorId", notes = "Actualizar un empleado", response = StatusType.class, tags={ "Empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "EXITO", response = StatusType.class),
        @ApiResponse(code = 400, message = "Bad request", response = StatusType.class),
        @ApiResponse(code = 404, message = "Not found", response = StatusType.class) })
    @RequestMapping(value = "/empleado/{idEmpleado}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<StatusType> actualizarEmpleadoPorId(@ApiParam(value = "Cabecera est치ndar" ,required=true) @RequestHeader(value="headerRq", required=true) String headerRq,@ApiParam(value = "servKall3" ,required=true) @RequestHeader(value="serviceID", required=true) String serviceID,@ApiParam(value = "Id del empleado a inactivar/activar",required=true) @PathVariable("idEmpleado") Integer idEmpleado);


    @ApiOperation(value = "Autenticar Empleado", nickname = "autenticarEmpleado", notes = "Autenticar un empleado", response = AutenticarRsType.class, tags={ "Empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "EXITO", response = AutenticarRsType.class),
        @ApiResponse(code = 400, message = "Bad request", response = AutenticarRsType.class),
        @ApiResponse(code = 404, message = "Not found", response = AutenticarRsType.class) })
    @RequestMapping(value = "/empleado/authenticationService/{usuario}/{pass}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AutenticarRsType> autenticarEmpleado(@ApiParam(value = "Cabecera est치ndar" ,required=true) @RequestHeader(value="headerRq", required=true) String headerRq,@ApiParam(value = "servKall3" ,required=true) @RequestHeader(value="serviceID", required=true) String serviceID,@ApiParam(value = "Id del empleado a consultar",required=true) @PathVariable("usuario") String usuario,@ApiParam(value = "Passdel empleado a consultar",required=true) @PathVariable("pass") String pass);


    @ApiOperation(value = "Consultar Empleado por ID", nickname = "consultarEmpleadoPorId", notes = "Retorna un empleado", response = EmpleadoRsType.class, tags={ "Empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "EXITO", response = EmpleadoRsType.class),
        @ApiResponse(code = 400, message = "Bad request", response = EmpleadoRsType.class),
        @ApiResponse(code = 404, message = "Not found", response = EmpleadoRsType.class) })
    @RequestMapping(value = "/empleado/{idEmpleado}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<EmpleadoRsType> consultarEmpleadoPorId(@ApiParam(value = "Cabecera est치ndar" ,required=true) @RequestHeader(value="headerRq", required=true) String headerRq,@ApiParam(value = "servKall3" ,required=true) @RequestHeader(value="serviceID", required=true) String serviceID,@ApiParam(value = "Id del empleado a consultar",required=true) @PathVariable("idEmpleado") Integer idEmpleado);


    @ApiOperation(value = "Registrar un Empleado", nickname = "registrarEmpleado", notes = "", response = PostRsType.class, tags={ "Empleado", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "EXITO", response = PostRsType.class),
        @ApiResponse(code = 400, message = "Bad request", response = PostRsType.class),
        @ApiResponse(code = 404, message = "Not found", response = PostRsType.class) })
    @RequestMapping(value = "/empleado",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<PostRsType> registrarEmpleado(@ApiParam(value = "Cabecera est치ndar" ,required=true) @RequestHeader(value="headerRq", required=true) String headerRq,@ApiParam(value = "servKall3" ,required=true) @RequestHeader(value="serviceID", required=true) String serviceID,@ApiParam(value = "Empleado a registrar" ,required=true )  @Valid @RequestBody Empleado empleado);

}
